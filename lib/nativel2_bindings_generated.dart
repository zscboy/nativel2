// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `'src/gol2/build/libgol2.h'`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class Nativel2Bindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Nativel2Bindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Nativel2Bindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> StartDaemon(
    ffi.Pointer<ffi.Char> jsonStrPtr,
  ) {
    return _StartDaemon(
      jsonStrPtr,
    );
  }

  late final _StartDaemonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('StartDaemon');
  late final _StartDaemon = _StartDaemonPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> StopDaemon() {
    return _StopDaemon();
  }

  late final _StopDaemonPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'StopDaemon');
  late final _StopDaemon =
      _StopDaemonPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> DaemonState() {
    return _DaemonState();
  }

  late final _DaemonStatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'DaemonState');
  late final _DaemonState =
      _DaemonStatePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> DaemonVersion() {
    return _DaemonVersion();
  }

  late final _DaemonVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'DaemonVersion');
  late final _DaemonVersion =
      _DaemonVersionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> Sign(
    ffi.Pointer<ffi.Char> jsonStrPtr,
  ) {
    return _Sign(
      jsonStrPtr,
    );
  }

  late final _SignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('Sign');
  late final _Sign = _SignPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void FreeCCtring(
    ffi.Pointer<ffi.Char> jsonStrPtr,
  ) {
    return _FreeCCtring(
      jsonStrPtr,
    );
  }

  late final _FreeCCtringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'FreeCCtring');
  late final _FreeCCtring =
      _FreeCCtringPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();
}
